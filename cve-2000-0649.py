import socket
import ssl
import argparse
import re

def check_vulnerability(host, port, path):
    try:
        # Create a socket object
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        
        # Wrap the socket with SSL
        context = ssl.create_default_context()
        s = context.wrap_socket(sock, server_hostname=host)
        
        # Establish a connection to the server
        s.connect((host, port))
        
        # Construct the HTTP/1.0 request without any headers
        request = f"GET {path} HTTP/1.0\r\n\r\n"
        
        # Send the request
        s.sendall(request.encode())
        
        # Receive the response
        response = s.recv(4096)
        
        # Decode the response
        response_decoded = response.decode()

        # Print the response
        print("\r\nServer response:")
        print(response_decoded)
        
        internal_ip_pattern = re.compile(
            r"(\b192\.168\.\d{1,3}\.\d{1,3}\b|\b10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b|\b172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b)"
        )
        
        if internal_ip_pattern.search(response_decoded):
            print("\r\nThe server may be vulnerable to CVE-2000-0649.")
            print("\r\nThe response contains an internal IP address, indicating a potential information disclosure.")
        else:
            print("No internal IP address found in the response.")

#        # Check for signs of vulnerability
#        if "400 Bad Request" not in response_decoded and "Host" not in response_decoded:
#            print("\r\nThe server may be vulnerable to CVE-2000-0649.")
#        else:
#            print("\r\nThe server does not appear to be vulnerable to CVE-2000-0649.")
        
        # Close the socket
        s.close()
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    # Print out some default text
    print("\r\nThis script verifies if the server is vulnerable for CVE-2000-0649.\r\nKeep in mind to play with HTTP, HTTPS and different paths. In my experience the disclosure is mostly happening when connecting over HTTP and using the default path '/' or '/images'\r\n")
    
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Check for CVE-2000-0649 vulnerability.')
    parser.add_argument('-host', required=True, help='Hostname or IP address of the server')
    parser.add_argument('-port', required=True, type=int, help='Port number of the server')
    parser.add_argument('-path', default='/', help='Path to request (default: /)')

    # Parse arguments
    args = parser.parse_args()

    # Check for vulnerability
    check_vulnerability(args.host, args.port, args.path)

if __name__ == '__main__':
    main()
